// Generated by CoffeeScript 1.6.3
(function() {
  zipper.backup = function(databaseName, includeData) {
    var dbOperation, initializeDatabaseJson, initializeStoreJson, saveStoreData, saveStoreIndexStructure, showDownloadLink;
    if (includeData == null) {
      includeData = true;
    }
    initializeDatabaseJson = function(db) {
      var databaseJson;
      databaseJson = {};
      databaseJson.name = db.name;
      databaseJson.version = db.version;
      databaseJson.objectStores = [];
      return databaseJson;
    };
    initializeStoreJson = function(store) {
      var storeJson;
      storeJson = {};
      storeJson.name = store.name;
      storeJson.options = {
        keyPath: store.keyPath,
        autoIncrement: store.autoIncrement
      };
      storeJson.indexes = [];
      storeJson.data = [];
      return storeJson;
    };
    saveStoreIndexStructure = function(store, storeJson) {
      var index, indexJson, indexName, indexNames, _i, _len, _results;
      indexNames = store.indexNames;
      _results = [];
      for (_i = 0, _len = indexNames.length; _i < _len; _i++) {
        indexName = indexNames[_i];
        index = store.index(indexName);
        indexJson = {};
        indexJson.name = indexName;
        indexJson.keyPath = index.keyPath;
        indexJson.options = {
          unique: index.unique,
          multiEntry: index.multiEntry
        };
        _results.push(storeJson.indexes.push(indexJson));
      }
      return _results;
    };
    saveStoreData = function(store, storeJson) {
      var cursorRequest;
      cursorRequest = store.openCursor();
      cursorRequest.onsuccess = function(e) {
        var result;
        result = e.target.result;
        if (result != null) {
          storeJson.data.push(result.value);
          return result["continue"]();
        }
      };
      return cursorRequest.onerror = zipper.indexedDB.onerror;
    };
    showDownloadLink = function() {
      var tag, url;
      url = zipper.generateDownloadUrl(JSON.stringify(zipper.databaseJson));
      tag = $('<a/>').attr('href', url).text('Download here');
      return $('body').append(tag);
    };
    dbOperation = function() {
      var db, name, objectStoreNames, store, storeJson, transaction, _i, _len, _results;
      db = zipper.indexedDB.db;
      zipper.databaseJson = initializeDatabaseJson(db);
      objectStoreNames = db.objectStoreNames;
      transaction = db.transaction(objectStoreNames, 'readonly');
      transaction.oncomplete = function() {
        return showDownloadLink();
      };
      _results = [];
      for (_i = 0, _len = objectStoreNames.length; _i < _len; _i++) {
        name = objectStoreNames[_i];
        store = transaction.objectStore(name);
        storeJson = initializeStoreJson(store);
        zipper.databaseJson.objectStores.push(storeJson);
        saveStoreIndexStructure(store, storeJson);
        if (includeData) {
          _results.push(saveStoreData(store, storeJson));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };
    return zipper.indexedDB.open(databaseName, dbOperation);
  };

  zipper.backupStructure = function(databaseName) {
    return zipper.backup(databaseName, false);
  };

  zipper.backupStructureAndData = zipper.backup;

}).call(this);
