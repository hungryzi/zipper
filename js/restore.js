// Generated by CoffeeScript 1.6.3
(function() {
  zipper.indexedDB.restore = function(jsonString) {
    var databaseJson, parseKeyPath, request;
    parseKeyPath = function(keyPathJson) {
      var key, keyPath, value;
      if (typeof keyPathJson === 'object') {
        keyPath = [];
        for (key in keyPathJson) {
          value = keyPathJson[key];
          if (!isNaN(key)) {
            keyPath.push(value);
          }
        }
      } else {
        keyPath = keyPathJson;
      }
      return keyPath;
    };
    databaseJson = JSON.parse(jsonString);
    request = indexedDB.open(databaseJson.name, databaseJson.version, databaseJson.options);
    request.onupgradeneeded = function(e) {
      var db, indexJson, keyPath, store, storeJson, _i, _len, _ref, _results;
      db = e.target.result;
      _ref = databaseJson.objectStores;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        storeJson = _ref[_i];
        keyPath = parseKeyPath(storeJson.keyPath);
        store = db.createObjectStore(storeJson.name, keyPath, storeJson.options);
        _results.push((function() {
          var _j, _len1, _ref1, _results1;
          _ref1 = storeJson.indexes;
          _results1 = [];
          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            indexJson = _ref1[_j];
            keyPath = parseKeyPath(indexJson.keyPath);
            _results1.push(store.createIndex(indexJson.name, keyPath, indexJson.options));
          }
          return _results1;
        })());
      }
      return _results;
    };
    request.onsuccess = function(e) {
      var db, obj, objectStoreNames, store, storeJson, transaction, _i, _j, _len, _len1, _ref, _ref1, _results;
      db = e.target.result;
      objectStoreNames = db.objectStoreNames;
      if (objectStoreNames.length === 0) {
        return;
      }
      transaction = db.transaction(db.objectStoreNames, 'readwrite');
      _ref = databaseJson.objectStores;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        storeJson = _ref[_i];
        store = transaction.objectStore(storeJson.name);
        _ref1 = storeJson.data;
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          obj = _ref1[_j];
          debugger;
          store.add(obj);
        }
        _results.push(null);
      }
      return _results;
    };
    return request.onerror = zipper.indexedDB.error;
  };

}).call(this);
